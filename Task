# Step 1: Backend (Python with Flask)
#1.Install Required Libraries:
#pip install flask pytesseract opencv-python-headless Pillow

#2.Backend Code: app.py

import pytesseract
from flask import Flask, request, jsonify
from PIL import Image
import re
import io
import cv2
import numpy as np

# Initialize Flask app
app = Flask(__name__)

# Configure Tesseract path if necessary
# pytesseract.pytesseract.tesseract_cmd = r'/usr/local/bin/tesseract'

def preprocess_image(image):
    # Convert image to grayscale and apply thresholding for better OCR results
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)
    return thresh

def extract_text_from_image(image_bytes):
    # Load image and preprocess it
    image = Image.open(io.BytesIO(image_bytes))
    open_cv_image = np.array(image.convert('RGB'))
    processed_image = preprocess_image(open_cv_image)

    # Use pytesseract to perform OCR on the image
    text = pytesseract.image_to_string(processed_image)
    return text

def extract_details(text):
    # Regex patterns for extraction
    name_pattern = r'Name:\s*([A-Za-z\s]+)'
    doc_number_pattern = r'Document No:\s*([A-Z0-9]+)'
    expiry_date_pattern = r'Expiry Date:\s*([0-9]{2}/[0-9]{2}/[0-9]{4})'

    name_match = re.search(name_pattern, text)
    doc_number_match = re.search(doc_number_pattern, text)
    expiry_date_match = re.search(expiry_date_pattern, text)

    return {
        'name': name_match.group(1) if name_match else 'Not Found',
        'document_number': doc_number_match.group(1) if doc_number_match else 'Not Found',
        'expiry_date': expiry_date_match.group(1) if expiry_date_match else 'Not Found'
    }

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file provided'}), 400

    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No file selected'}), 400

    image_bytes = file.read()
    text = extract_text_from_image(image_bytes)
    details = extract_details(text)

    return jsonify(details)

if __name__ == '__main__':
    app.run(debug=True)


#3.Explanation of Key Functions:
# preprocess_image: Preprocesses the image to grayscale and threshold, improving OCR accuracy.
# extract_text_from_image: Uses Tesseract to extract raw text from the image.
# extract_details: Searches for Name, Document Number, and Expiration Date using regex patterns.
# 4.Run the Backend Server:

python app.py


# Step 2: Frontend (React)
# To create a simple React frontend, you can set up a form to upload files and show the extracted data.
# 1.Install Axios:
npm install axios

#2. Frontend Code: App.js
import React, { useState } from 'react';
import axios from 'axios';

function App() {
    const [file, setFile] = useState(null);
    const [result, setResult] = useState(null);

    const handleFileChange = (e) => {
        setFile(e.target.files[0]);
    };

    const handleUpload = async () => {
        if (!file) return;
        const formData = new FormData();
        formData.append('file', file);

        try {
            const response = await axios.post('http://localhost:5000/upload', formData, {
                headers: { 'Content-Type': 'multipart/form-data' }
            });
            setResult(response.data);
        } catch (error) {
            console.error("Error uploading file:", error);
        }
    };

    return (
        <div>
            <h1>Document Capture</h1>
            <input type="file" onChange={handleFileChange} />
            <button onClick={handleUpload}>Upload</button>
            {result && (
                <div>
                    <h2>Extracted Details:</h2>
                    <p>Name: {result.name}</p>
                    <p>Document Number: {result.document_number}</p>
                    <p>Expiry Date: {result.expiry_date}</p>
                </div>
            )}
        </div>
    );
}

export default App;

#3. Run the React App:
npm start


# Step 3: Testing and Screenshots

# 1.Testing:
# Use sample images of a passport or driverâ€™s license and check if the system accurately extracts and displays details.

# 2.Screenshots:
# Capture the UI showing extracted data and command-line results for backend operations.
